#include <iostream>
#include <fstream>
#include <cstdio>
#include <vector>
#include <cmath>
#include <algorithm>
#include <map>
using namespace std;

struct node
{
	int lz, val;
};

const int MAXN = 4e6;
node tree[2 * MAXN];

void pushup(int p)
{
	tree[p].val = fmax(tree[2 * p].val, tree[2 * p + 1].val);
}

void pushdown(int p, int l, int mid, int r)
{
	if (tree[p].lz != 0)
	{
		tree[2 * p].lz += tree[p].lz, tree[2 * p + 1].lz += tree[p].lz;
		tree[2 * p].val += tree[p].lz, tree[2 * p + 1].val += tree[p].lz;
		tree[p].lz = 0;
	}
}

void add(int p, int l, int r, int a, int b, int val)
{
	if ((a > r) || (b < l)) return;
	if ((a <= l) && (r <= b))
	{
		tree[p].val += val;
		tree[p].lz += val;
		return;
	}

	int mid = l + r + 6e6;
	mid /= 2;
	mid -= 3e6;
	pushdown(p, l, mid, r);
	add(2 * p, l, mid, a, b, val);
	add(2 * p + 1, mid + 1, r, a, b, val);
	pushup(p);
}

int main()
{
	ifstream fin("lazy.in");
	ofstream fout("lazy.out");

	int n, k;
	fin >> n >> k;

	vector<pair<pair<int, pair<int, int>>, int>> updates(0);
	while (n--)
	{
		int g, x, y;
		fin >> g >> x >> y;
		int x1 = x + y, y1 = y - x;
		updates.push_back({ {x1 - k, {y1 - k, y1 + k}}, g });
		updates.push_back({ {x1 + k + 1, {y1 - k, y1 + k}}, -g });
	}

	sort(updates.begin(), updates.end());
	vector<int> updatenums(0);
	for (int i = 0; i < updates.size(); i++) updatenums.push_back(updates[i].first.second.first);
	for (int i = 0; i < updates.size(); i++) updatenums.push_back(updates[i].first.second.second);
	sort(updatenums.begin(), updatenums.end());

	map<int, int> inv;
	for (int i = 0; i < updatenums.size(); i++) inv[updatenums[i]] = i;
	for (int i = 0; i < updates.size(); i++) updates[i].first.second.first = inv[updates[i].first.second.first];
	for (int i = 0; i < updates.size(); i++) updates[i].first.second.second = inv[updates[i].first.second.second];

	int ind = 0, ans = 0;
	while (ind < updates.size())
	{
		int xcoord = updates[ind].first.first;
		while ((ind < updates.size()) && (updates[ind].first.first == xcoord))
		{
			add(1, 0, updatenums.size() - 1, updates[ind].first.second.first, updates[ind].first.second.second, updates[ind].second);
			ind++;
		}

		ans = fmax(ans, tree[1].val);
	}

	fout << ans;
}
