#include <iostream>
#include <fstream>
#include <vector>
#include <cmath>
using namespace std;
using ll = long long;

vector<ll> segmentTree(1 << 18, 0);

void updateTree(int node)
{
	node += 1 << 17;
	while (node > 0)
	{
		segmentTree[node]++;
		node /= 2;
	}
}

ll sum(int l, int r)
{
	l += 1 << 17;
	r += 1 << 17;
	ll ans = 0;
	while (l <= r)
	{
		if (l % 2 == 1) ans += segmentTree.at(l++);
		if (r % 2 == 0) ans += segmentTree.at(r--);
		l /= 2;
		r /= 2;
	}

	return ans;
}

int main()
{
	ifstream fin("mincross.in");
	ofstream fout("mincross.out");

	int n;
	fin >> n;

	vector<int> left(n);
	for (int i = 0; i < n; i++) fin >> left.at(i);
	vector<int> inv(n + 1);
	for (int i = 0; i < n; i++)
	{
		int r;
		fin >> r;
		inv.at(r) = i;
	}

	for (int i = 0; i < n; i++) left.at(i) = inv.at(left.at(i));

	ll inversions = 0;
	for (int i = 0; i < n; i++)
	{
		inversions += sum(left.at(i) + 1, n);
		updateTree(left.at(i));
	}

	ll ans = inversions;
	for (int i = 0; i < n; i++)
	{
		inversions -= left.at(i);
		inversions += (n - 1 - left.at(i));
		ans = min(ans, inversions);
	}

	for (int i = 0; i < 1 << 18; i++) segmentTree.at(i) = 0;
	vector<int> right(n);
	for (int i = 0; i < n; i++) right.at(left.at(i)) = i;
	inversions = 0;
	for (int i = 0; i < n; i++)
	{
		inversions += sum(right.at(i) + 1, n);
		updateTree(right.at(i));
	}

	ans = min(ans, inversions);
	for (int i = 0; i < n; i++)
	{
		inversions -= right.at(i);
		inversions += (n - 1 - right.at(i));
		ans = min(ans, inversions);
	}

	fout << ans;
}
