#include <iostream>
#include <fstream>
#include <cstdio>
#include <vector>
#include <cmath>
using namespace std;

struct node
{
	int mxstrk, sfxstrk, prestrk, lzval, sz, l, r;
};

const int sz1 = 1 << 20;
vector<node> tree(sz1);

void pushup(int p)
{
	int lc = 2 * p, rc = 2 * p + 1;
	tree[p].prestrk = tree[lc].prestrk;
	if (tree[lc].prestrk == tree[lc].sz) tree[p].prestrk += tree[rc].prestrk;
	tree[p].sfxstrk = tree[rc].sfxstrk;
	if (tree[rc].sfxstrk == tree[rc].sz) tree[p].sfxstrk += tree[lc].sfxstrk;
	tree[p].mxstrk = fmax(tree[lc].sfxstrk + tree[rc].prestrk, fmax(tree[lc].mxstrk, tree[rc].mxstrk));
}

void pushdown(int p, int l, int mid, int r)
{
	if (tree[p].lzval != 2)
	{
		int lc = 2 * p, rc = 2 * p + 1;
		tree[lc].lzval = tree[rc].lzval = tree[p].lzval;
		if (tree[p].lzval == 1) tree[lc].mxstrk = tree[rc].mxstrk = tree[lc].prestrk = tree[rc].prestrk = tree[lc].sfxstrk = tree[rc].sfxstrk = 0;
		else
		{
			tree[lc].mxstrk = tree[lc].prestrk = tree[lc].sfxstrk = tree[lc].sz;
			tree[rc].mxstrk = tree[rc].prestrk = tree[rc].sfxstrk = tree[rc].sz;
		}

		tree[p].lzval = 2;
	}
}

void build(int p, int l, int r)
{
	tree[p].lzval = 2, tree[p].l = l, tree[p].r = r, tree[p].mxstrk = tree[p].prestrk = tree[p].sfxstrk = tree[p].sz = r - l + 1;
	if (l == r) return;
	int mid = l + (r - l) / 2;
	int lc = 2 * p, rc = 2 * p + 1;
	build(lc, l, mid);
	build(rc, mid + 1, r);
}

void upd(int p, int l, int r, int a, int b, int st)
{
	if ((a > r) || (b < l)) return;
	if ((a <= l) && (r <= b))
	{
		tree[p].lzval = st;
		if (st == 1) tree[p].mxstrk = tree[p].prestrk = tree[p].sfxstrk = 0;
		else tree[p].mxstrk = tree[p].prestrk = tree[p].sfxstrk = tree[p].sz;
		return;
	}

	int mid = l + (r - l) / 2;
	int lc = 2 * p, rc = 2 * p + 1;
	pushdown(p, l, mid, r);
	upd(lc, l, mid, a, b, st);
	upd(rc, mid + 1, r, a, b, st);
	pushup(p);
}

int main()
{
	ifstream fin("seating.in");
	ofstream fout("seating.out");

	ios::sync_with_stdio(false);
	fin.tie(nullptr);

	int n, _;
	fin >> n >> _;
	build(1, 1, n);

	int ans = 0;
	while (_--)
	{
		char c;
		fin >> c;
		if (c == 'L')
		{
			int a, b;
			fin >> a >> b;
			upd(1, 1, n, a, b, 0);
		}

		else
		{
			int a;
			fin >> a;
			if (tree[1].mxstrk < a) ans++;
			else
			{
				int p = 1;
				bool cont = true;
				while (cont)
				{
					if (tree[p].sz == 1)
					{
						upd(1, 1, n, tree[p].l, tree[p].r, 1);
						cont = false;
					}

					else
					{
						int lc = 2 * p, rc = 2 * p + 1;
						pushdown(p, tree[p].l, tree[lc].r, tree[p].r);
						if (tree[lc].mxstrk >= a) p = lc;
						else if (tree[lc].sfxstrk + tree[rc].prestrk >= a)
						{
							upd(1, 1, n, tree[lc].r - tree[lc].sfxstrk + 1, tree[lc].r - tree[lc].sfxstrk + a, 1);
							cont = false;
						}

						else p = rc;
					}
				}
			}
		}
	}

	fout << ans;
}
