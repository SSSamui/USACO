#include <iostream>
#include <fstream>
#include <cstdio>
#include <vector>
#include <cmath>
#include <queue>
using namespace std;

const int INF = 1e9;
vector<int> radd = { -1, 0, 1, 0 };
vector<int> cadd = { 0, -1, 0, 1 };

int main()
{
	ifstream fin("cownav.in");
	ofstream fout("cownav.out");

	int n;
	fin >> n;
	vector<vector<char>> grd(n + 2, vector<char>(n + 2, 'H'));
	for (int i = n; i > 0; i--) for (int j = 1; j <= n; j++) fin >> grd[i][j];

	vector<vector<vector<vector<vector<vector<int>>>>>> dst(n + 2, vector<vector<vector<vector<vector<int>>>>>(n + 2,
		vector<vector<vector<vector<int>>>>(4, vector<vector<vector<int>>>(n + 2, vector<vector<int>>(n + 2, vector<int>(4, INF))))));
	dst[1][1][2][1][1][3] = 0;
	queue<pair<pair<pair<int, int>, int>, pair<pair<int, int>, int>>> bfs;
	bfs.push({ {{1, 1}, 2}, {{1, 1}, 3} });
	while (!bfs.empty())
	{
		int r1 = bfs.front().first.first.first, c1 = bfs.front().first.first.second, d1 = bfs.front().first.second;
		int r2 = bfs.front().second.first.first, c2 = bfs.front().second.first.second, d2 = bfs.front().second.second;
		int d = dst[r1][c1][d1][r2][c2][d2];
		bfs.pop();

		if ((r1 != n) || (c1 != n)) d1 = (d1 + 1) % 4;
		if ((r2 != n) || (c2 != n)) d2 = (d2 + 1) % 4;
		if (dst[r1][c1][d1][r2][c2][d2] == INF)
		{
			dst[r1][c1][d1][r2][c2][d2] = d + 1;
			bfs.push({ {{r1, c1}, d1}, {{r2, c2}, d2} });
		}

		if ((r1 != n) || (c1 != n)) d1 = (d1 + 2) % 4;
		if ((r2 != n) || (c2 != n)) d2 = (d2 + 2) % 4;
		if (dst[r1][c1][d1][r2][c2][d2] == INF)
		{
			dst[r1][c1][d1][r2][c2][d2] = d + 1;
			bfs.push({ {{r1, c1}, d1}, {{r2, c2}, d2} });
		}

		if ((r1 != n) || (c1 != n))
		{
			d1 = (d1 + 1) % 4;
			r1 += radd[d1], c1 += cadd[d1];
			if (grd[r1][c1] == 'H') r1 -= radd[d1], c1 -= cadd[d1];
		}

		if ((r2 != n) || (c2 != n))
		{
			d2 = (d2 + 1) % 4;
			r2 += radd[d2], c2 += cadd[d2];
			if (grd[r2][c2] == 'H') r2 -= radd[d2], c2 -= cadd[d2];
		}

		if (dst[r1][c1][d1][r2][c2][d2] == INF)
		{
			dst[r1][c1][d1][r2][c2][d2] = d + 1;
			bfs.push({ {{r1, c1}, d1}, {{r2, c2}, d2} });
		}
	}

	int ans = INF;
	for (int d1 = 0; d1 < 4; d1++) for (int d2 = 0; d2 < 4; d2++) ans = fmin(ans, dst[n][n][d1][n][n][d2]);
	fout << ans;
}
