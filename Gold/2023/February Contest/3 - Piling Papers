#include <iostream>
#include <cstdio>
#include <vector>
#include <cmath>
#include <algorithm>
using namespace std;
using ll = long long;

int n;
ll a, b;
int digits[300];
const int MOD = 1e9 + 7;

vector<vector<int>> solve(ll maxposs)
{
	vector<ll> dig(0);
	while (maxposs > 0)
	{
		dig.push_back(maxposs % 10);
		maxposs /= 10;
	}

	reverse(dig.begin(), dig.end());
	int m = dig.size();
	vector<vector<vector<int>>> last(m, vector<vector<int>>(m, vector<int>(3, 0)));
	vector<vector<vector<int>>> curr(m, vector<vector<int>>(m, vector<int>(3, 0)));
	vector<vector<int>> ans(n, vector<int>(n, 0));
	for (int i = 0; i < n; i++)
	{
		for (int j = i; j < n; j++)
		{
			for (int k = 0; k < m; k++)
			{
				if (digits[j] < dig[k])
				{
					curr[k][k][0] += 2;
					curr[k][k][0] %= MOD;
				}

				else if (digits[j] > dig[k])
				{
					curr[k][k][2] += 2;
					curr[k][k][2] %= MOD;
				}

				else
				{
					curr[k][k][1] += 2;
					curr[k][k][1] %= MOD;
				}
			}

			for (int k = 0; k < m; k++) for (int l = k; l < m; l++) for (int lg = 0; lg < 3; lg++)
			{
				if (k > 0)
				{
					if (digits[j] < dig[k - 1])
					{
						curr[k - 1][l][0] += last[k][l][lg];
						curr[k - 1][l][0] %= MOD;
					}

					else if (digits[j] > dig[k - 1])
					{
						curr[k - 1][l][2] += last[k][l][lg];
						curr[k - 1][l][2] %= MOD;
					}

					else
					{
						curr[k - 1][l][lg] += last[k][l][lg];
						curr[k - 1][l][lg] %= MOD;
					}
				}

				if (l < m - 1)
				{
					if (lg != 1)
					{
						curr[k][l + 1][lg] += last[k][l][lg];
						curr[k][l + 1][lg] %= MOD;
					}

					else
					{
						if (digits[j] < dig[l + 1])
						{
							curr[k][l + 1][0] += last[k][l][1];
							curr[k][l + 1][0] %= MOD;
						}

						else if (digits[j] > dig[l + 1])
						{
							curr[k][l + 1][2] += last[k][l][1];
							curr[k][l + 1][2] %= MOD;
						}

						else
						{
							curr[k][l + 1][1] += last[k][l][1];
							curr[k][l + 1][1] %= MOD;
						}
					}
				}
			}

			last = curr;
			for (int k = 0; k < m; k++) for (int lg = 0; lg < 3; lg++) if ((k != m - 1) || (lg != 2))
			{
				ans[i][j] += last[0][k][lg];
				ans[i][j] %= MOD;
			}
		}

		for (int j = 0; j < m; j++) for (int k = j; k < m; k++) for (int lg = 0; lg < 3; lg++)
		{
			last[j][k][lg] = 0;
			curr[j][k][lg] = 0;
		}
	}

	return ans;
}

int main()
{
	ios::sync_with_stdio(false);
	cin.tie(nullptr);

	cin >> n >> a >> b;
	for (int i = 0; i < n; i++) cin >> digits[i];

	vector<vector<int>> ans1 = solve(a - 1);
	vector<vector<int>> ans2 = solve(b);

	int q;
	cin >> q;
	while (q--)
	{
		int l, r;
		cin >> l >> r;

		int ans = ans2[l - 1][r - 1] - ans1[l - 1][r - 1];
		ans %= MOD;
		if (ans < 0) ans += MOD;
		cout << ans << "\n";
	}
}
