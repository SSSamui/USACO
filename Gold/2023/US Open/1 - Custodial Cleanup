#include <iostream>
#include <cstdio>
#include <vector>
#include <cmath>
#include <set>
using namespace std;

int main()
{
	ios::sync_with_stdio(false);
	cin.tie(nullptr);

	int _;
	cin >> _;
	while (_--)
	{
		int n, m;
		cin >> n >> m;
		vector<int> c(n + 1), s(n + 1), f(n + 1);
		for (int i = 1; i <= n; i++) cin >> c[i];
		for (int i = 1; i <= n; i++) cin >> s[i];
		for (int i = 1; i <= n; i++) cin >> f[i];

		vector<set<int>> invc(n + 1);
		for (int i = 1; i <= n; i++) invc[c[i]].insert(i);

		vector<vector<int>> adj(n + 1, vector<int>(0));
		while (m--)
		{
			int a, b;
			cin >> a >> b;
			adj[a].push_back(b), adj[b].push_back(a);
		}

		set<int> colused, tprc, pot, prced;
		tprc.insert(1);
		while (!tprc.empty())
		{
			int prc = *tprc.begin();
			tprc.erase(prc), prced.insert(prc);

			if (colused.count(s[prc]) == 0)
			{
				colused.insert(s[prc]);
				for (int tchk : invc[s[prc]]) if (pot.count(tchk) == 1) tprc.insert(tchk), pot.erase(tchk);
			}

			for (int nxt : adj[prc]) if (pot.count(nxt) == 0) if (prced.count(nxt) == 0) if (tprc.count(nxt) == 0)
			{
				if (colused.count(c[nxt]) == 1) tprc.insert(nxt);
				else pot.insert(nxt);
			}
		}

		colused.clear(), pot.clear();
		set<int> prced1;
		tprc.insert(1);
		while (!tprc.empty())
		{
			int prc = *tprc.begin();
			tprc.erase(prc);


			if (((prc == 1) || (colused.count(c[prc]) == 1)) || (c[prc] == f[prc]))
			{
				prced1.insert(prc);
				if (colused.count(f[prc]) == 0)
				{
					colused.insert(f[prc]);
					for (int tchk : invc[f[prc]]) if (pot.count(tchk) == 1) tprc.insert(tchk), pot.erase(tchk);
				}

				for (int nxt : adj[prc]) if (prced.count(nxt) == 1)
					if (prced1.count(nxt) == 0) if (pot.count(nxt) == 0) if (tprc.count(nxt) == 0) tprc.insert(nxt);
			}

			else pot.insert(prc);
		}

		bool poss = true;
		if (prced != prced1) poss = false;
		for (int i = 1; i <= n; i++) if (prced.count(i) == 0) if (s[i] != f[i]) poss = false;
		cout << (poss ? "YES\n" : "NO\n");
	}
}
