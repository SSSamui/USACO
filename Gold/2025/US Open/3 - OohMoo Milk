#include <iostream>
#include <cstdio>
#include <vector>
#include <cmath>
#include <queue>
using namespace std;
using ll = long long;

const ll MOD = 1e9 + 7;

int main()
{
	int n, d;
	cin >> n >> d;
	int a, b;
	cin >> a >> b;

	priority_queue<int> m;
	while (n--)
	{
		int cm;
		cin >> cm;
		m.push(-cm);
	}

	ll ans = 0;
	while (m.size() > a)
	{
		ans += 1ll * m.top() * m.top();
		ans %= MOD, m.pop();
	}

	ll tadd = 1ll * d * (a - b);
	int ladd = 0;
	queue<int> av;
	av.push(-m.top());
	m.pop();

	bool cont = true;
	while (cont)
	{
		int extra = d - ladd;
		if (!m.empty()) extra = min(extra, -m.top() - av.front() - ladd);
		if (1ll * extra * av.size() > tadd)
		{
			cont = false;
			ll resadd = tadd / av.size(), rem = tadd % av.size();
			int ressmall = av.front() + ladd + resadd;

			ll tadd = 1ll * av.size() * ressmall;
			tadd %= MOD;
			tadd *= ressmall;
			tadd %= MOD;

			tadd += 2 * rem * ressmall;
			tadd %= MOD;
			tadd += rem;
			tadd %= MOD;

			ans += tadd;
			ans %= MOD;
			while (!m.empty())
			{
				ans += 1ll * m.top() * m.top();
				ans %= MOD;
				m.pop();
			}
		}

		else
		{
			tadd -= 1ll * extra * av.size(), ladd += extra;
			if (ladd == d)
			{
				ans += 1ll * (av.front() + d) * (av.front() + d);
				ans %= MOD;
				int lins = av.front() + d;
				av.pop();

				if (!av.empty()) ladd = lins - av.front();
				else
				{
					if (m.empty()) cont = false;
					else
					{
						ladd = 0, av.push(-m.top());
						m.pop();
					}
				}
			}

			else
			{
				av.push(-m.top());
				m.pop();
			}
		}
	}

	cout << ans;
}
