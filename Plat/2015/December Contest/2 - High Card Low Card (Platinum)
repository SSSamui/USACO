#include <iostream>
#include <fstream>
#include <cstdio>
#include <vector>
#include <cmath>
#include <algorithm>
#include <cassert>
using namespace std;

struct node
{
	int pts, bmoves, emoves;
};

vector<node> tree(1 << 18);

void updatenode(int nde)
{
	while (nde > 1)
	{
		nde /= 2;
		int ep = fmin(tree[2 * nde].emoves, tree[2 * nde + 1].bmoves);
		tree[nde].pts = tree[2 * nde].pts + tree[2 * nde + 1].pts + ep;
		tree[nde].emoves = tree[2 * nde].emoves + tree[2 * nde + 1].emoves - ep;
		tree[nde].bmoves = tree[2 * nde].bmoves + tree[2 * nde + 1].bmoves - ep;
	}
}

void updateemoves(int nde)
{
	nde += (1 << 17);
	tree[nde].emoves++;
	updatenode(nde);
}

void updatebmoves(int nde)
{
	nde += (1 << 17);
	tree[nde].bmoves++;
	updatenode(nde);
}

vector<int> hcardpts(vector<int> b, vector<int> e)
{
	int n = b.size();
	vector<int> ans(n + 1, 0);
	for (int i = 0; i < n; i++)
	{
		updatebmoves(b[i]);
		updateemoves(e[i]);
		ans[i + 1] = tree[1].pts;
	}

	return ans;
}

int main()
{
	ifstream fin("cardgame.in");
	ofstream fout("cardgame.out");

	ios::sync_with_stdio(false);
	fin.tie(nullptr);

	int n;
	fin >> n;

	vector<bool> bposs(2 * n + 1, true);
	vector<int> e(n);
	for (int i = 0; i < n; i++)
	{
		fin >> e[i];
		bposs[e[i]] = false;
	}

	vector<int> b(0);
	for (int i = 2 * n; i > 0; i--) if (bposs[i]) b.push_back(i);
	vector<int> pref = hcardpts(b, e);
	
	for (int i = 1; i < tree.size(); i++)
	{
		tree[i].pts = 0;
		tree[i].bmoves = 0;
		tree[i].emoves = 0;
	}

	reverse(b.begin(), b.end()), reverse(e.begin(), e.end());
	for (int i = 0; i < n; i++) b[i] = 2 * n - b[i];
	for (int i = 0; i < n; i++) e[i] = 2 * n - e[i];
	vector<int> suff = hcardpts(b, e);

	int ans = 0;
	for (int i = 0; i <= n; i++) ans = fmax(ans, pref[i] + suff[n - i]);
	fout << ans;
}
