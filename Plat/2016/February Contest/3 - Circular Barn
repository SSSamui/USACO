#include <iostream>
#include <fstream>
#include <cstdio>
#include <vector>
#include <cmath>
using namespace std;
using ll = long long;

const ll INF = 1e18;
const int MXN = 1001, MXK = 7;

vector<vector<ll>> dp(MXN, vector<ll>(MXK));
vector<ll> psums1(MXN, 0), psums2(MXN, 0);

void upd(int ck, int l, int r, int mnchk, int mxchk)
{
	int mid = l + (r - l) / 2;
	int optj = 1;
	dp[mid][ck] = psums2[mid];
	for (int j = mnchk; (j <= mxchk) && (j <= mid); j++) if (dp[j - 1][ck - 1] - (psums1[mid] - psums1[j - 1]) * j + (psums2[mid] -
		psums2[j - 1]) < dp[mid][ck]) optj = j, dp[mid][ck] = dp[j - 1][ck - 1] - (psums1[mid] - psums1[j - 1]) * j + (psums2[mid]
			- psums2[j - 1]);
	if (l < mid) upd(ck, l, mid - 1, mnchk, optj);
	if (r > mid) upd(ck, mid + 1, r, optj, mxchk);
}

int main()
{
	ifstream fin("cbarn.in");
	ofstream fout("cbarn.out");

	ios::sync_with_stdio(false);
	fin.tie(nullptr);

	int n, k;
	fin >> n >> k;
	vector<vector<ll>> num(n, vector<ll>(n));
	for (int i = 0; i < n; i++) fin >> num[0][i];
	for (int i = 1; i < n; i++)
	{
		for (int j = 1; j < n; j++) num[i][j - 1] = num[i - 1][j];
		num[i][n - 1] = num[i - 1][0];
	}

	ll ans = INF;
	for (int i = 0; i < n; i++)
	{
		for (int j = 1; j < n; j++) psums1[j] = psums1[j - 1] + num[i][j], psums2[j] = psums2[j - 1] + num[i][j] * j;
		for (int j = 0; j < n; j++) dp[j][0] = psums2[j];
		for (int j = 1; j < k; j++) upd(j, 0, n - 1, 1, n - 1);
		ans = fmin(ans, dp[n - 1][k - 1]);
	}

	fout << ans;
}
