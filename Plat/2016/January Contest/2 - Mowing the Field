#include <iostream>
#include <fstream>
#include <cstdio>
#include <vector>
#include <cmath>
#include <algorithm>
#include <map>
using namespace std;
using ll = long long;

const int sz = 1 << 16;
const ll one = 1;

vector<vector<int>> mgtree(2 * sz, vector<int>(0)), segtree(2 * sz, vector<int>(0));
vector<int> szlst(2 * sz, 0);

int main()
{
	ifstream fin("mowing.in");
	ofstream fout("mowing.out");

	ios::sync_with_stdio(false);
	fin.tie(nullptr);

	int n, t;
	fin >> n >> t;
	vector<pair<int, int>> coords(n);
	for (int i = 0; i < n; i++) fin >> coords[i].first >> coords[i].second;
	if (coords[0].second != coords[1].second) for (int i = 0; i < n; i++) swap(coords[i].first, coords[i].second);

	vector<pair<int, int>> tsrt(0);
	vector<pair<pair<int, int>, pair<int, int>>> seg1(0);
	for (int i = 1; i < n; i += 2)
	{
		seg1.push_back({ {coords[i - 1].first, coords[i].first}, {coords[i].second, i} });
		if (seg1.back().first.first > seg1.back().first.second) swap(seg1.back().first.first, seg1.back().first.second);
		seg1.back().first.first++;
		if (seg1.back().first.first >= seg1.back().first.second) seg1.pop_back();
		else tsrt.push_back({ coords[i].second, i });
	}

	sort(tsrt.begin(), tsrt.end());
	for (int i = 0; i < tsrt.size(); i++) mgtree[sz + i].push_back(tsrt[i].second);
	for (int exp = 0; exp < 17; exp++)
	{
		int l = 16 - exp;
		l = 1 << l;
		int r = 2 * l - 1;

		int csz = 1 << exp;
		vector<int> currtree(2 * csz, 0);
		for (int p = l; p <= r; p++)
		{
			szlst[p] = csz, segtree[p] = currtree;
			if (exp > 0)
			{
				int i = 0, j = 0;
				int lc = 2 * p, rc = 2 * p + 1;
				while (i < mgtree[lc].size())
				{
					while ((j < mgtree[rc].size()) && (mgtree[rc][j] < mgtree[lc][i]))
					{
						mgtree[p].push_back(mgtree[rc][j]);
						j++;
					}

					mgtree[p].push_back(mgtree[lc][i]);
					i++;
				}

				while (j < mgtree[rc].size())
				{
					mgtree[p].push_back(mgtree[rc][j]);
					j++;
				}
			}
		}
	}

	map<pair<int, int>, int> inv;
	for (int i = 0; i < tsrt.size(); i++) inv[tsrt[i]] = i;
	vector<pair<pair<int, int>, int>> upd(0);
	for (int i = 0; i < seg1.size(); i++) upd.push_back({ {seg1[i].first.first, inv[seg1[i].second]}, 1 }),
		upd.push_back({ {seg1[i].first.second, inv[seg1[i].second]}, -1 });
	sort(upd.begin(), upd.end());

	vector<pair<pair<int, int>, pair<int, int>>> qry(0);
	for (int i = 2; i < n; i += 2)
	{
		pair<int, int> yseg = { coords[i - 1].second, coords[i].second };
		if (yseg.first > yseg.second) swap(yseg.first, yseg.second);
		int l = 0, r = tsrt.size();
		while (l < r)
		{
			int mid = l + (r - l) / 2;
			if (tsrt[mid].first > yseg.first) r = mid;
			else l = mid + 1;
		}

		int l1 = l;
		l = -1, r = tsrt.size() - 1;
		while (l < r)
		{
			int mid = l + (r - l + 1) / 2;
			if (tsrt[mid].first < yseg.second) l = mid;
			else r = mid - 1;
		}

		int r1 = r;
		if (l1 <= r1) qry.push_back({ {coords[i].first, i}, {l1, r1} });
	}

	sort(qry.begin(), qry.end());

	int updind = 0;
	ll ans = 0;
	for (int i = 0; i < qry.size(); i++)
	{
		while ((updind < upd.size()) && (upd[updind].first.first <= qry[i].first.first))
		{
			int tfnd = tsrt[upd[updind].first.second].second, cind = upd[updind].first.second;
			cind += sz;
			while (cind > 0)
			{
				int l = 0, r = mgtree[cind].size() - 1;
				while (l < r)
				{
					int mid = l + (r - l) / 2;
					if (mgtree[cind][mid] == tfnd) l = mid, r = mid;
					else if (mgtree[cind][mid] < tfnd) l = mid + 1;
					else r = mid - 1;
				}

				l += szlst[cind];
				while (l > 0)
				{
					segtree[cind][l] += upd[updind].second;
					l /= 2;
				}

				cind /= 2;
			}

			updind++;
		}

		int ndel = qry[i].second.first, nder = qry[i].second.second;
		int ind = qry[i].first.second;
		ndel += sz, nder += sz;

		int sum1 = 0, sum2 = 0;
		while (ndel <= nder)
		{
			if (ndel % 2 == 1)
			{
				sum1 += segtree[ndel][1];
				int l = 0, r = mgtree[ndel].size();
				while (l < r)
				{
					int mid = l + (r - l) / 2;
					if (mgtree[ndel][mid] < ind - t) l = mid + 1;
					else r = mid;
				}

				int rngl = l;
				l = -1, r = mgtree[ndel].size() - 1;
				while (l < r)
				{
					int mid = l + (r - l + 1) / 2;
					if (mgtree[ndel][mid] > ind + t) r = mid - 1;
					else l = mid;
				}

				int rngr = r;
				rngl += szlst[ndel], rngr += szlst[nder];
				while (rngl <= rngr)
				{
					if (rngl % 2 == 1) sum2 += segtree[ndel][rngl++];
					if (rngr % 2 == 0) sum2 += segtree[ndel][rngr--];
					rngl /= 2, rngr /= 2;
				}

				ndel++;
			}

			if (nder % 2 == 0)
			{
				sum1 += segtree[nder][1];
				int l = 0, r = mgtree[nder].size();
				while (l < r)
				{
					int mid = l + (r - l) / 2;
					if (mgtree[nder][mid] < ind - t) l = mid + 1;
					else r = mid;
				}

				int rngl = l;
				l = -1, r = mgtree[nder].size() - 1;
				while (l < r)
				{
					int mid = l + (r - l + 1) / 2;
					if (mgtree[nder][mid] > ind + t) r = mid - 1;
					else l = mid;
				}

				int rngr = r;
				rngl += szlst[nder], rngr += szlst[nder];
				while (rngl <= rngr)
				{
					if (rngl % 2 == 1) sum2 += segtree[nder][rngl++];
					if (rngr % 2 == 0) sum2 += segtree[nder][rngr--];
					rngl /= 2, rngr /= 2;
				}

				nder--;
			}

			ndel /= 2, nder /= 2;
		}

		sum1 -= sum2;
		ans += one * sum1;
	}

	fout << ans;
}
