#include <iostream>
#include <cstdio>
#include <vector>
#include <cmath>
using namespace std;
using ll = long long;

const int sz = 1 << 17;
const ll one = 1;

vector<vector<int>> mgtree(2 * sz, vector<int>(0)), segtree(2 * sz, vector<int>(0));
vector<int> szlst(2 * sz, 0);

int main()
{
	ios::sync_with_stdio(false);
	cin.tie(nullptr);

	int n, k;
	cin >> n >> k;
	vector<pair<int, int>> pos(n);
	for (int i = 0; i < n; i++)
	{
		int a;
		cin >> a;
		pos[a - 1].first = i;
	}

	for (int i = 0; i < n; i++)
	{
		int a;
		cin >> a;
		pos[a - 1].second = i;
		mgtree[sz + pos[a - 1].first].push_back(i);
	}

	for (int exp = 0; exp < 18; exp++)
	{
		int l = 17 - exp;
		l = 1 << l;
		int r = 2 * l - 1;

		int csz = 1 << exp;
		vector<int> currtree(2 * csz, 0);
		for (int p = l; p <= r; p++)
		{
			szlst[p] = csz, segtree[p] = currtree;
			if (exp > 0)
			{
				int i = 0, j = 0;
				int lc = 2 * p, rc = 2 * p + 1;
				while (i < mgtree[lc].size())
				{
					while ((j < mgtree[rc].size()) && (mgtree[rc][j] < mgtree[lc][i]))
					{
						mgtree[p].push_back(mgtree[rc][j]);
						j++;
					}

					mgtree[p].push_back(mgtree[lc][i]);
					i++;
				}

				while (j < mgtree[rc].size())
				{
					mgtree[p].push_back(mgtree[rc][j]);
					j++;
				}
			}
		}
	}

	ll ans = 0;
	for (int i = k + 1; i < n; i++)
	{
		int ind = pos[i - k - 1].first, tfnd = pos[i - k - 1].second;
		ind += sz;
		while (ind > 0)
		{
			int l = 0, r = mgtree[ind].size() - 1;
			while (l < r)
			{
				int mid = l + (r - l) / 2;
				if (mgtree[ind][mid] == tfnd) l = mid, r = mid;
				else if (mgtree[ind][mid] < tfnd) l = mid + 1;
				else r = mid - 1;
			}

			l += szlst[ind];
			while (l > 0)
			{
				segtree[ind][l]++;
				l /= 2;
			}

			ind /= 2;
		}

		int sum1 = 0;
		int l = 0, r = pos[i].second - 1;
		l += sz, r += sz;
		while (l <= r)
		{
			if (l % 2 == 1) sum1 += segtree[1][l++];
			if (r % 2 == 0) sum1 += segtree[1][r--];
			l /= 2, r /= 2;
		}

		int sum2 = 0;
		l = 0, r = pos[i].first - 1;
		l += sz, r += sz;
		while (l <= r)
		{
			if (l % 2 == 1) sum2 += segtree[l++][1];
			if (r % 2 == 0) sum2 += segtree[r--][1];
			l /= 2, r /= 2;
		}

		int sum3 = 0;
		int lind = 0, rind = pos[i].first - 1;
		lind += sz, rind += sz;
		tfnd = pos[i].second;
		while (lind <= rind)
		{
			if (lind % 2 == 1)
			{
				l = -1, r = mgtree[lind].size() - 1;
				while (l < r)
				{
					int mid = l + (r - l + 1) / 2;
					if (mgtree[lind][mid] < tfnd) l = mid;
					else r = mid - 1;
				}

				l = 0;
				l += szlst[lind], r += szlst[lind];
				while (l <= r)
				{
					if (l % 2 == 1) sum3 += segtree[lind][l++];
					if (r % 2 == 0) sum3 += segtree[lind][r--];
					l /= 2, r /= 2;
				}

				lind++;
			}

			if (rind % 2 == 0)
			{
				l = -1, r = mgtree[rind].size() - 1;
				while (l < r)
				{
					int mid = l + (r - l + 1) / 2;
					if (mgtree[rind][mid] < tfnd) l = mid;
					else r = mid - 1;
				}

				l = 0;
				l += szlst[rind], r += szlst[rind];
				while (l <= r)
				{
					if (l % 2 == 1) sum3 += segtree[rind][l++];
					if (r % 2 == 0) sum3 += segtree[rind][r--];
					l /= 2, r /= 2;
				}

				rind--;
			}

			lind /= 2, rind /= 2;
		}

		sum1 -= sum3, sum2 -= sum3;
		sum1 += sum2;
		ans += one * sum1;
	}

	cout << ans;
}
