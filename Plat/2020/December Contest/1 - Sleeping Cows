#include <iostream>
#include <cstdio>
#include <vector>
#include <cmath>
#include <algorithm>
using namespace std;
using ll = long long;

const ll MOD = 1e9 + 7;

int main()
{
	ios::sync_with_stdio(false);
	cin.tie(nullptr);

	int n;
	cin >> n;
	vector<pair<int, int>> tprc(0);
	for (int i = 0; i < n; i++)
	{
		int a;
		cin >> a;
		tprc.push_back({ a, 0 });
	}

	for (int i = 0; i < n; i++)
	{
		int a;
		cin >> a;
		tprc.push_back({ a, 1 });
	}

	sort(tprc.begin(), tprc.end());
	vector<vector<ll>> lst(n + 1, vector<ll>(2, 0));
	lst[0][0] = 1;
	for (int i = 0; i < tprc.size(); i++)
	{
		if (tprc[i].second == 0)
		{
			vector<vector<ll>> curr(n + 1, vector<ll>(2, 0));
			for (int j = 1; j <= n; j++) curr[j][0] = lst[j - 1][0];
			for (int j = 0; j <= n; j++)
			{
				curr[j][1] = (lst[j][1] + lst[j][0]) % MOD;
				if (j > 0) curr[j][1] = (curr[j][1] + lst[j - 1][1]) % MOD;
			}

			lst = curr;
		}

		else
		{
			vector<vector<ll>> curr(n + 1, vector<ll>(2, 0));
			for (int j = 0; j < n; j++) curr[j][1] = (lst[j + 1][1] * (j + 1)) % MOD;
			for (int j = 0; j <= n; j++)
			{
				curr[j][0] = lst[j][0];
				if (j < n) curr[j][0] = (curr[j][0] + ((lst[j + 1][0] * (j + 1)) % MOD)) % MOD;
			}

			lst = curr;
		}
	}

	cout << (lst[0][0] + lst[0][1]) % MOD;
}
