#include <iostream>
#include <cstdio>
#include <vector>
#include <cmath>
#include <queue>
using namespace std;
using ll = long long;

const ll MOD = 1e9 + 7;
const int MXN = 1e5;

ll pw(ll b, ll e)
{
	if (e == 0) return 1;
	if (e % 2 == 1) return (pw(b, e - 1) * b) % MOD;
	ll ans = pw(b, e / 2);
	return (ans * ans) % MOD;
}

int main()
{
	ios::sync_with_stdio(false);
	cin.tie(nullptr);

	vector<ll> inv(MXN, 0);
	for (int i = 1; i < MXN; i++) inv[i] = pw(i, MOD - 2);

	int k;
	cin >> k;
	vector<vector<vector<int>>> invd(2 * MXN, vector<vector<int>>(0)), prc(0);
	for (int i = 0; i < k; i++)
	{
		int n, m;
		cin >> n >> m;
		vector<vector<int>> adj(n + 1, vector<int>(0));
		while (m--)
		{
			int a, b;
			cin >> a >> b;
			adj[a].push_back(b), adj[b].push_back(a);
		}

		queue<vector<int>> tprc;
		tprc.push({ 1, 0, 0 });
		vector<vector<int>> dst(n + 1, vector<int>(2, -1));
		dst[1][0] = 0;
		while (!tprc.empty())
		{
			int nde = tprc.front()[0], oe = tprc.front()[1], d = tprc.front()[2];
			tprc.pop();
			for (int nxt : adj[nde]) if (dst[nxt][1 - oe] == -1)
				dst[nxt][1 - oe] = d + 1, tprc.push({ nxt, 1 - oe, d + 1 });
		}

		for (int j = 1; j <= n; j++) for (int K = 0; K < 2; K++) if (dst[j][K] > -1)
			invd[dst[j][K]].push_back({ i, j });
		prc.push_back(vector<vector<int>>(n + 1, vector<int>(3, 0)));
	}

	ll ans = 0;
	ll prc0 = 1, prc1 = 1, prc2 = 0;
	vector<int> cnt0(k, 1), cnt1(k, 0), cnt2(k, 0);
	for (int i = 0; i < k; i++) prc[i][1][0]++, prc[i][1][2]++;
	for (int i = 0; i < invd[1].size(); i++)
		cnt1[invd[1][i][0]]++, prc[invd[1][i][0]][invd[1][i][1]][1]++, prc[invd[1][i][0]][invd[1][i][1]][2]++;
	for (int i = 0; i < k; i++) prc1 = (prc1 * cnt1[i]) % MOD;
	ans = prc1;
	int cnt = 0;
	for (int i = 0; i < k; i++) if (prc[i][1][2] == 2) cnt++, cnt2[i]++;
	if (cnt == k) ans--, prc2++;
	for (int d = 2; d < 2 * MXN; d++) for (int i = 0; i < invd[d].size(); i++)
	{
		int stt = d % 2, gph = invd[d][i][0], nde = invd[d][i][1];
		prc[gph][nde][stt]++, prc[gph][nde][2]++;

		ll pss = 0;
		if (stt == 0)
		{
			prc0 = (prc0 * inv[cnt0[gph]]) % MOD;
			pss = prc0;
			cnt0[gph]++;
			prc0 = (prc0 * cnt0[gph]) % MOD;
		}

		else
		{
			prc1 = (prc1 * inv[cnt1[gph]]) % MOD;
			pss = prc1;
			cnt1[gph]++;
			prc1 = (prc1 * cnt1[gph]) % MOD;
		}

		if (prc[gph][nde][2] == 2)
		{
			ll tmin = 0;
			if (cnt2[gph] == 0)
			{
				cnt2[gph]++, prc2++;
				for (int g = 0; g < k; g++) prc2 = (prc2 * cnt2[g]) % MOD;
				tmin = prc2;
			}

			else
			{
				prc2 = (prc2 * inv[cnt2[gph]]) % MOD;
				tmin = prc2;
				cnt2[gph]++;
				prc2 = (prc2 * cnt2[gph]) % MOD;
			}

			pss = (pss - tmin + MOD) % MOD;
		}

		pss = (pss * d) % MOD;
		ans = (ans + pss) % MOD;
	}

	cout << ans;
}
