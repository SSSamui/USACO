#include <iostream>
#include <cstdio>
#include <vector>
#include <cmath>
using namespace std;

const int MOD = 1e9 + 7;

int main()
{
	ios::sync_with_stdio(false);
	cin.tie(nullptr);

	int n;
	cin >> n;
	vector<vector<char>> grid(n, vector<char>(n));
	for (int i = 0; i < n; i++) for (int j = 0; j < n; j++) cin >> grid[i][j];

	vector<vector<vector<vector<int>>>> dp(2, vector<vector<vector<int>>>(2,
		vector<vector<int>>(n, vector<int>(n, 0))));

	int ans = 0;
	for (int i = 0; i < n; i++)
	{
		for (int l = 0; l < n; l++)
		{
			bool inc = true;
			for (int r = l; r < n; r++)
			{
				if (grid[i][r] == '.') inc = false;
				if (!inc) dp[0][0][l][r] = 0, dp[0][1][l][r] = 0, dp[1][0][l][r] = 0, dp[1][1][l][r] = 0;
				else
				{
					dp[0][0][l][r]++;
					ans = (ans + dp[0][0][l][r]) % MOD;
					ans = (ans + dp[0][1][l][r]) % MOD;
					ans = (ans + dp[1][0][l][r]) % MOD;
					ans = (ans + dp[1][1][l][r]) % MOD;
				}
			}
		}

		for (int d = 1; d < n; d++) for (int r = d; r < n; r++)
		{
			dp[0][0][r - d][r] = (dp[0][0][r - d][r] + dp[0][0][r - d + 1][r]) % MOD;
			dp[0][0][r - d][r] = (dp[0][0][r - d][r] + dp[0][0][r - d][r - 1]) % MOD;
			dp[0][0][r - d][r] = (dp[0][0][r - d][r] - dp[0][0][r - d + 1][r - 1] + MOD) % MOD;
		}

		for (int d = n - 2; d > -1; d--) for (int r = d; r < n; r++)
		{
			if (r - d > 0) dp[1][1][r - d][r] = (dp[1][1][r - d][r] + dp[1][1][r - d - 1][r]) % MOD;
			if (r < n - 1) dp[1][1][r - d][r] = (dp[1][1][r - d][r] + dp[1][1][r - d][r + 1]) % MOD;
			if ((r - d > 0) && (r < n - 1))
				dp[1][1][r - d][r] = (dp[1][1][r - d][r] - dp[1][1][r - d - 1][r + 1] + MOD) % MOD;
		}

		for (int l = n - 1; l > -1; l--) for (int r = n - 1; r > -1; r--)
		{
			if (l < n - 1) dp[0][1][l][r] = (dp[0][1][l][r] + dp[0][1][l + 1][r]) % MOD;
			if (r < n - 1) dp[0][1][l][r] = (dp[0][1][l][r] + dp[0][1][l][r + 1]) % MOD;
			if ((l < n - 1) && (r < n - 1)) dp[0][1][l][r] = (dp[0][1][l][r] - dp[0][1][l + 1][r + 1] + MOD) % MOD;
		}

		for (int l = 0; l < n; l++) for (int r = 0; r < n; r++)
		{
			if (l > 0) dp[1][0][l][r] = (dp[1][0][l][r] + dp[1][0][l - 1][r]) % MOD;
			if (r > 0) dp[1][0][l][r] = (dp[1][0][l][r] + dp[1][0][l][r - 1]) % MOD;
			if ((l > 0) && (r > 0)) dp[1][0][l][r] = (dp[1][0][l][r] - dp[1][0][l - 1][r - 1] + MOD) % MOD;
		}

		vector<vector<vector<vector<int>>>> psums = dp;
		for (int l = 0; l < n; l++) for (int r = 0; r < l; r++) dp[0][1][l][r] = 0, dp[1][0][l][r] = 0;
		for (int l = 0; l < n; l++) for (int r = l; r < n; r++)
		{
			if (r < n - 1) dp[0][1][l][r] = (dp[0][1][l][r] - psums[0][1][r + 1][r + 1] + MOD) % MOD;
			if (l > 0) dp[1][0][l][r] = (dp[1][0][l][r] - psums[1][0][l - 1][l - 1] + MOD) % MOD;
			
			dp[1][1][l][r] = (dp[1][1][l][r] + psums[1][0][l][n - 1]) % MOD;
			dp[1][1][l][r] = (dp[1][1][l][r] - psums[1][0][l][r] + MOD) % MOD;
			dp[1][1][l][r] = (dp[1][1][l][r] + psums[0][1][0][r]) % MOD;
			dp[1][1][l][r] = (dp[1][1][l][r] - psums[0][1][l][r] + MOD) % MOD;
			dp[1][1][l][r] = (dp[1][1][l][r] + psums[0][0][0][n - 1]) % MOD;
			dp[1][1][l][r] = (dp[1][1][l][r] - psums[0][0][0][r] + MOD) % MOD;
			dp[1][1][l][r] = (dp[1][1][l][r] - psums[0][0][l][n - 1] + MOD) % MOD;
			dp[1][1][l][r] = (dp[1][1][l][r] + psums[0][0][l][r]) % MOD;
			dp[1][0][l][r] = (dp[1][0][l][r] + psums[0][0][0][r]) % MOD;
			dp[1][0][l][r] = (dp[1][0][l][r] - psums[0][0][l][r] + MOD) % MOD;
			if (l > 0) dp[1][0][l][r] = (dp[1][0][l][r] - psums[0][0][0][l - 1] + MOD) % MOD;
			dp[0][1][l][r] = (dp[0][1][l][r] + psums[0][0][l][n - 1]) % MOD;
			dp[0][1][l][r] = (dp[0][1][l][r] - psums[0][0][l][r] + MOD) % MOD;
			if (r < n - 1) dp[0][1][l][r] = (dp[0][1][l][r] - psums[0][0][r + 1][n - 1] + MOD) % MOD;
		}
	}

	cout << ans;
}
